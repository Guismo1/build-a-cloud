---
- hosts: localhost
  connection: local
  vars_files:
    - ./cloud_vars.yml
  

  tasks:
    - name: example2 ec2 key
      ec2_key:
        name: '{{ cloud_tag }}_key'
        region: '{{ aws_region }}'
        key_material: '{{ ssh_public_key }}'
        state: present

    - name: Create VPC
      ec2_vpc:
        state: present
        cidr_block: '{{ aws_vpc_cidr }}'
        resource_tags:
          Name: '{{ cloud_tag }}'
          Owner: stevenca
          Environment: '{{ cloud_tag }}'
        region: '{{ aws_region }}'
        dns_hostnames: no
        dns_support: yes
        instance_tenancy: default
        internet_gateway: True
      register: vpc

    - name: Create Security Group
      ec2_group:
        name: csr_security_group
        description: an example EC2 group
        vpc_id: '{{ vpc.vpc_id }}'
        region: '{{ aws_region }}'
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8022
            to_port: 8022
            cidr_ip: 0.0.0.0/0
          - proto: udp
            from_port: 500
            to_port: 500
            cidr_ip: 0.0.0.0/0
          - proto: udp
            from_port: 4500
            to_port: 4500
            cidr_ip: 0.0.0.0/0                         
          - proto: icmp
            from_port: 8 # icmp type, -1 = any type
            to_port:  -1 # icmp subtype, -1 = any subtype
            cidr_ip: 0.0.0.0/0
      register: csr_security_group

    - name: Create outside subnet
      ec2_vpc_subnet:
        state: present
        vpc_id: '{{ vpc.vpc_id }}'
        cidr: '{{ aws_outside_subnet_cidr }}'
        region: '{{ aws_region }}'
        az: "{{ aws_region }}b"
        resource_tags:
          Name: Outside (10.5.0.0/24)
          Owner: stevenca
          Environment: '{{ cloud_tag }}'
      register: outside_subnet

    - name: Set up outside subnet route table
      ec2_vpc_route_table:
        vpc_id: '{{ vpc.vpc_id }}'
        region: '{{ aws_region }}'
        tags:
          Name: CSR (Public)
          Owner: stevenca
          Environment: '{{ cloud_tag }}'
        subnets:
          - '{{ outside_subnet.subnet.id }}'
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ vpc.igw_id }}"
      register: public_route_table
      when: outside_subnet.changed

    - name: Create CSR instance
      ec2:
        key_name: '{{ cloud_tag }}_key'
        region: '{{ aws_region }}'
        instance_type: m3.medium
        instance_tags:
          Name: '{{ cloud_tag }}_csr'
          Owner: stevenca
          Environment: '{{ cloud_tag }}'
          Role: '{{ cloud_tag }}_csr'
        image: '{{ aws_csr_ami }}'
        group_id: '{{ csr_security_group.group_id }}'
        wait: yes
        exact_count: 1
        count_tag:
          - Role: '{{ cloud_tag }}_csr'
        vpc_subnet_id: '{{ outside_subnet.subnet.id }}'
        assign_public_ip: yes
      register: csr

#    - debug: var=hostvars[inventory_hostname]

    - name: Get the CSR's Instance ID
      set_fact:
        csr_instance_id: '{{ hostvars[inventory_hostname]["csr"]["tagged_instances"][0].id if hostvars[inventory_hostname]["csr"]["tagged_instances"][0] is defined else "none" }}'

    - name: Get the CSR's Private IP Address
      set_fact:
        csr_outside_private_ip: '{{ hostvars[inventory_hostname]["csr"]["tagged_instances"][0].private_ip if hostvars[inventory_hostname]["csr"]["tagged_instances"][0] is defined else "none" }}'

    - name: Get the CSR's Public IP Address
      set_fact:
        csr_outside_public_ip: '{{ hostvars[inventory_hostname]["csr"]["tagged_instances"][0].public_ip if hostvars[inventory_hostname]["csr"]["tagged_instances"][0] is defined else "none" }}'

    - name: Add CSR to local host group
      local_action: lineinfile dest=hosts regexp="{{ csr_outside_public_ip }}" insertafter="\[spokes\]" line="{{ csr_outside_public_ip }} csr_outside_private_ip={{ csr_outside_private_ip }} instance_id={{ csr_instance_id }}" state=present
      when: csr_outside_public_ip != "none"

    - name: Create Inside subnet
      ec2_vpc_subnet:
        state: present
        vpc_id: '{{ vpc.vpc_id }}'
        cidr: '{{ aws_inside_subnet_cidr }}'
        region: '{{ aws_region }}'
        az: "{{ aws_region }}b"
        resource_tags:
          Name: Inside (10.5.1.0/24)
          Owner: stevenca
          Environment: '{{ cloud_tag }}'
      register: inside_subnet
    
    - name: Create CSR's inside interface            
      ec2_eni:
        instance_id: '{{ csr_instance_id }}'
        region: '{{ aws_region }}'
        device_index: 1
        private_ip_address: 10.5.1.254
        subnet_id: '{{ inside_subnet.subnet.id }}'
        state: present
        delete_on_termination: true
        source_dest_check: disabled
        security_groups: '{{ csr_security_group.group_id }}'
      register: csr_inside_interface
      when: csr.changed

    - name: Set up inside subnet route table
      ec2_vpc_route_table:
        vpc_id: '{{ vpc.vpc_id }}'
        region: '{{ aws_region }}'
        tags:
          Name: CSR (Private)
          Owner: stevenca
          Environment: '{{ cloud_tag }}'
        subnets:
          - '{{ inside_subnet.subnet.id }}'
        routes:
          - dest: 0.0.0.0/0
            interface_id: '{{ csr_inside_interface.interface.id }}'
      register: private_route_table       
      when: csr_inside_interface.changed

    - name: Create login instance
      ec2:
        key_name: '{{ cloud_tag }}_key'
        region: '{{ aws_region }}'
        instance_type: t2.micro
        instance_tags:
          Name: '{{ cloud_tag }}_login'
          Owner: stevenca
          Environment: '{{ cloud_tag }}'
          Role: '{{ cloud_tag }}_login'
        image: ami-d1315fb1
        group_id: '{{ csr_security_group.group_id }}'
        exact_count: 1
        count_tag:
          - Role: '{{ cloud_tag }}_login'
        wait: yes
        vpc_subnet_id: '{{ inside_subnet.subnet.id }}'
        private_ip: 10.5.1.10
        assign_public_ip: no
      register: login_server

    - name: Add Login Server to local host group
      local_action: lineinfile dest=hosts regexp="{{ hostvars[inventory_hostname]["login_server"]["tagged_instances"][0].private_ip }}" insertafter="\[hosts\]" line="{{ hostvars[inventory_hostname]["login_server"]["tagged_instances"][0].private_ip }} instance_id={{ hostvars[inventory_hostname]["login_server"]["tagged_instances"][0].id }}" state=present
      when: csr_outside_public_ip != "none"

      

#    - debug: var=hostvars[inventory_hostname]