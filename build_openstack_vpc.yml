---
- hosts: localhost
  connection: local
  gather_facts: no
  vars:
    csr_public_ip_address:
  vars_files:
    - ./cloud_vars.yml
  
  tasks:      
    - name: Create the tenant network
      os_network:
        state: present
        shared: false
        name: '{{ cloud_tag }}'
        external: false
      register: tenant_network
        
    - name: Create the tenant subnet
      os_subnet:
        state: present
        network_name: '{{ cloud_tag }}'
        name: '{{ cloud_tag }}'
        cidr: 10.30.1.0/24
        dns_nameservers:
          - '{{ dns_server1 }}'
          - '{{ dns_server2 }}'
        host_routes:
          - destination: 0.0.0.0/0
            nexthop: 10.30.1.254
      register: tenant_subnet 

    - name: Create security group
      os_security_group:
        state: present
        name: '{{ cloud_tag }}'

    - name: Add SSH security group rules
      os_security_group_rule:
        security_group: '{{ cloud_tag }}'
        protocol: tcp
        port_range_min: 22
        port_range_max: 22
        remote_ip_prefix: 0.0.0.0/0

    - name: Add SSH security group rules
      os_security_group_rule:
        security_group: '{{ cloud_tag }}'
        protocol: icmp
        port_range_min: -1
        port_range_max: -1
        remote_ip_prefix: 0.0.0.0/0

    - name: Add UDP 500 security group rules
      os_security_group_rule:
        security_group: '{{ cloud_tag }}'
        protocol: udp
        port_range_min: 500
        port_range_max: 500
        remote_ip_prefix: 0.0.0.0/0

    - name: Add UDP 4500 security group rules
      os_security_group_rule:
        security_group: '{{ cloud_tag }}'
        protocol: udp
        port_range_min: 4500
        port_range_max: 4500
        remote_ip_prefix: 0.0.0.0/0

    - name: Add private network port
      os_port:
        state: present
        name: '{{ cloud_tag }}_private_port'
        network: '{{ tenant_network.id }}'
        fixed_ips:
        - ip_address: 10.30.1.254
      register: tenant_subnet_port

      # Since we are not using the ansble module to start the CSR, we need to check
      # first to maintain the idempotency
    - name: See if the CSR is already there
      os_server_facts:
        server: '{{ cloud_tag }}_csr'
      register: csr_facts
          
    - name: Create the CSR
      shell: nova boot {{ cloud_tag }}_csr --image {{ openstack_csr_image }} --flavor {{ openstack_csr_flavor }} --nic net-id={{ openstack_shared_network }} --nic port-id={{ tenant_subnet_port.port.id }} --config-drive=true --file iosxe_config.txt=./iosxe_config.txt --security-groups {{ cloud_tag }} --key_name STEVENCA-M-202D
      args:
        executable: /bin/bash
      when: hostvars[inventory_hostname]["csr_facts"]["ansible_facts"]["openstack_servers"][0].id is not defined
      register: openstack_csr

      # We have to run this again if we started up a CSR to populate the facts
    - name: See if the CSR is already there
      os_server_facts:
        server: '{{ cloud_tag }}_csr'
      register: csr_facts

    - name: Get the Private IP Address
      set_fact:
        csr_private_ip_address: '{{ hostvars[inventory_hostname]["csr_facts"]["ansible_facts"]["openstack_servers"][0].interface_ip if hostvars[inventory_hostname]["csr_facts"]["ansible_facts"]["openstack_servers"][0].interface_ip is defined else "none" }}'

    - name: Get the Public IP Address
      set_fact:
        csr_public_ip_address: '{{ hostvars[inventory_hostname]["csr_facts"]["ansible_facts"]["openstack_servers"][0]["addresses"][openstack_shared_network_name][1].addr if hostvars[inventory_hostname]["csr_facts"]["ansible_facts"]["openstack_servers"][0]["addresses"][openstack_shared_network_name][1] is defined else "none" }}'

    - name: Add the Floating IP
      os_floating_ip:
        state: present
        reuse: yes
        fixed_address: "{{ csr_private_ip_address }}"
        network: '{{ openstack_external_network }}'
        server: '{{ cloud_tag }}_csr'
        wait: true
        timeout: 180
      when: csr_public_ip_address == "none"
      register: csr_public_ip_address

      # Need to run a third time because the floating IP does not seem to return reliably
    - name: See if the CSR is already there
      os_server_facts:
        server: '{{ cloud_tag }}_csr'
      register: csr_facts

    - name: Get the Public IP Address
      set_fact:
        csr_public_ip_address: '{{ hostvars[inventory_hostname]["csr_facts"]["ansible_facts"]["openstack_servers"][0]["addresses"][openstack_shared_network_name][1].addr if hostvars[inventory_hostname]["csr_facts"]["ansible_facts"]["openstack_servers"][0]["addresses"][openstack_shared_network_name][1] is defined else "none" }}'

    - debug: var=hostvars[inventory_hostname]

    - name: Add instance to local host group
      local_action: lineinfile dest=hosts regexp="{{ csr_public_ip_address }}" insertafter="\[hub\]" line="{{ csr_public_ip_address }} name={{ cloud_tag }}_csr" state=present
      when: csr_public_ip_address != "none"
        
#    - name: See if the CSR is already there
#      os_server_facts:
#        server: '{{ cloud_tag }}_csr'
#      when: hostvars[inventory_hostname]["csr_facts"]["ansible_facts"]["openstack_servers"][0].id is not defined
#      register: csr_facts

#    - name: Get the Name of the Shared Network
#      os_networks_facts:
#        filters:
#          network: '{{ openstack_shared_network  }}'
#      register: openstack_shared_network_facts
      

            
#    - name: Get the addresses dict
#      set_fact: shared_subnet_name='{{item[0]}}'
#      when: item[0] != openstack_shared_network
#      with_items: '{{ hostvars[inventory_hostname]["csr_facts"]["ansible_facts"]["openstack_servers"][0]["addresses"]|dictsort|default([]) }}'


#    - name: Get the Public IP Address
#      set_fact: csr_public_ip_address='{{hostvars[inventory_hostname]["csr_facts"]["ansible_facts"]["openstack_servers"][0]["networks"][openstack_shared_network_name][1]}}'
#      when: hostvars[inventory_hostname]["csr_facts"]["ansible_facts"]["openstack_servers"][0]["networks"][openstack_shared_network_name][1] is defined 
      

#      when: "{{ csr_public_ip_address | ipaddr }}"

      
