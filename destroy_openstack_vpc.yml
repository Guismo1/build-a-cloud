---
- hosts: localhost
  connection: local
  gather_facts: no
  vars:
    csr_public_ip_address:
  vars_files:
    - ./cloud_vars.yml
  
  tasks:      

       # Since we are not using the ansble module to start the CSR, we need to check
      # first to maintain the idempotency
    - name: See if the CSR is already there
      os_server_facts:
      register: server_facts

    - name: Add private network port
      os_port:
        state: present
        name: '{{ cloud_tag }}_private_port'
        network: '{{ tenant_network.id }}'
        fixed_ips:
        - ip_address: 10.30.1.254
      register: tenant_subnet_port
          
    - name: Create the CSR
      shell: nova boot {{ cloud_tag }}_csr --image {{ openstack_csr_image }} --flavor {{ openstack_csr_flavor }} --nic net-id={{ openstack_shared_network }} --nic port-id={{ tenant_subnet_port.port.id }} --config-drive=true --file iosxe_config.txt=./iosxe_config.txt --security-groups {{ cloud_tag }} --key_name STEVENCA-M-202D
      args:
        executable: /bin/bash
      when: hostvars[inventory_hostname]["csr_facts"]["ansible_facts"]["openstack_servers"][0].id is not defined
      register: openstack_csr

      # We have to run this again if we started up a CSR to populate the facts
    - name: See if the CSR is already there
      os_server_facts:
        server: '{{ cloud_tag }}_csr'
      register: csr_facts

    - name: Get the Private IP Address
      set_fact:
        csr_private_ip_address: '{{ hostvars[inventory_hostname]["csr_facts"]["ansible_facts"]["openstack_servers"][0].interface_ip if hostvars[inventory_hostname]["csr_facts"]["ansible_facts"]["openstack_servers"][0].interface_ip is defined else "none" }}'

    - name: Get the Public IP Address
      set_fact:
        csr_public_ip_address: '{{ hostvars[inventory_hostname]["csr_facts"]["ansible_facts"]["openstack_servers"][0]["addresses"][openstack_shared_network_name][1].addr if hostvars[inventory_hostname]["csr_facts"]["ansible_facts"]["openstack_servers"][0]["addresses"][openstack_shared_network_name][1] is defined else "none" }}'

    - name: Add the Floating IP
      os_floating_ip:
        state: present
        reuse: yes
        fixed_address: "{{ csr_private_ip_address }}"
        network: '{{ openstack_external_network }}'
        server: '{{ cloud_tag }}_csr'
        wait: true
        timeout: 180
      when: csr_public_ip_address == "none"
      register: csr_public_ip_address

      # Need to run a third time because the floating IP does not seem to return reliably
    - name: See if the CSR is already there
      os_server_facts:
        server: '{{ cloud_tag }}_csr'
      register: csr_facts

    - name: Get the Public IP Address
      set_fact:
        csr_public_ip_address: '{{ hostvars[inventory_hostname]["csr_facts"]["ansible_facts"]["openstack_servers"][0]["addresses"][openstack_shared_network_name][1].addr if hostvars[inventory_hostname]["csr_facts"]["ansible_facts"]["openstack_servers"][0]["addresses"][openstack_shared_network_name][1] is defined else "none" }}'

    - debug: var=hostvars[inventory_hostname]

    - name: Add instance to local host group
      local_action: lineinfile dest=hosts regexp="{{ csr_public_ip_address }}" insertafter="\[hub\]" line="{{ csr_public_ip_address }} name={{ cloud_tag }}_csr" state=present
      when: csr_public_ip_address != "none"
      
      
             
#    - name: Delete the tenant subnet
#      os_subnet:
#        state: absent
#        network_name: '{{ cloud_tag }}'

#    - name: Delete the tenant network
#      os_network:
#        state: absent
#        name: '{{ cloud_tag }}'

#    - name: Delete security group
#      os_security_group:
#        state: absent
#        name: '{{ cloud_tag }}'




        
